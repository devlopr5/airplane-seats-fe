{"version":3,"sources":["services/app.service.js","views/MainView.js","App.js","reportWebVitals.js","index.js"],"names":["aborter","AbortController","fillSeats","rcs","passengers","a","fetch","method","headers","body","JSON","stringify","rowsAndColumns","noOfPassengers","response","responseType","get","data","indexOf","text","t","parse","ok","StyledTableCell","withStyles","theme","root","padding","borderLeft","TableCell","StyledTable","border","Table","useStyles","makeStyles","mainCard","height","cardContent","alignItems","overflowX","gridContainer","tables","display","cardActions","MainView","props","classes","useState","filledSeats","setFilledSeats","totalSeats","setTotalSeats","showInput","setShowInput","rc","setRc","errorRc","setErrorRc","errorPass","setErrorPass","pass","setPass","loading","setLoading","event","undefined","temp","forEach","arr","push","AppService","seats","seatsArrangement","Paper","Card","className","CardHeader","title","subheader","LinearProgress","CardContent","Grid","container","xs","spacing","item","TextField","id","fullWidth","label","multiline","rowsMax","value","onChange","target","variant","error","helperText","type","map","zones","TableContainer","component","rows","TableRow","seat","CardActions","Button","color","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09673d4b.chunk.js","sourcesContent":["const aborter = new AbortController();\r\n\r\nconst fillSeats = async function (rcs , passengers) {\r\n    try {\r\n\t\tlet response = await fetch( `http://localhost:8080/v1/fillSeats`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: { 'Content-type': 'application/json' },\r\n            body: JSON.stringify({\r\n                rowsAndColumns : rcs,\r\n                noOfPassengers : passengers\r\n            })\r\n\t\t})\r\n        let responseType = response.headers.get('content-type')\r\n        let data = null;\r\n        if(responseType && responseType.indexOf('application/json') > -1) {\r\n            let t = await response.text();\r\n            try {\r\n                data = JSON.parse(t);\r\n            }\r\n            catch {\r\n                data = t;\r\n            }\r\n        }\r\n        else {\r\n            data = await response.text();\r\n        }\r\n        if(response.ok) {\r\n            if(data) return data;\r\n            else return response;\r\n        }\r\n        else{\r\n            if(data) throw data;\r\n            else throw response;\r\n        }\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\nexport default {\r\n    fillSeats,\r\n    aborter\r\n};\r\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport {Button, Card, CardActions, CardContent, CardHeader, Grid, LinearProgress, Paper, Table, TableCell, TableContainer, TableRow, TextField, withStyles} from '@material-ui/core';\r\n\r\nimport AppService from '../services/app.service';\r\n\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    root: {\r\n      padding : '5px !important',\r\n      borderLeft : '1px solid #d9d9d9'\r\n    }\r\n  }))(TableCell);\r\n  const StyledTable = withStyles((theme) => ({\r\n    root: {\r\n      border : '2px solid #b3b3b3'\r\n    }\r\n  }))(Table);\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    mainCard: {\r\n        height : '100%'\r\n    },\r\n    cardContent: {\r\n        alignItems : 'center',\r\n        overflowX : 'scroll'\r\n    },\r\n    gridContainer: {\r\n      \r\n    },\r\n    tables: {\r\n        display: 'inline-table'\r\n    },\r\n    cardActions :{\r\n        display : 'block !important'\r\n    }\r\n}));\r\n\r\nconst MainView = (props) => {\r\n    const classes = useStyles();\r\n    \r\n    const [filledSeats, setFilledSeats] = useState(null);\r\n    const [totalSeats, setTotalSeats] = useState(0);\r\n    const [showInput, setShowInput] = useState(true);\r\n    const [rc, setRc] = useState(null);\r\n    const [errorRc , setErrorRc] = useState(null);\r\n    const [errorPass, setErrorPass] = useState(null);\r\n    const [pass, setPass ] = useState();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const reset = () => {\r\n        setFilledSeats(null);\r\n        setTotalSeats(null);\r\n        setErrorRc(null); setRc(null);\r\n        setErrorPass(null); setPass(null);\r\n        setShowInput(true);\r\n    }\r\n    const fillSeats = async event => {\r\n        if(rc == null || rc === undefined ){\r\n        setErrorRc(\"Please enter rows & columns value\"); \r\n        return;\r\n        }\r\n        if(pass == null || pass === undefined ){\r\n        setErrorPass(\"Please valid no. of passenger\"); \r\n        return;\r\n        }\r\n        try{\r\n        var temp = [];\r\n        JSON.parse(rc).forEach((arr) => temp.push(arr) );\r\n        try {\r\n            setLoading(true);\r\n            \r\n            let seats = await AppService.fillSeats(\r\n                temp,\r\n                pass\r\n            );\r\n            setFilledSeats(seats.seatsArrangement);\r\n            setTotalSeats(seats.totalSeats);\r\n            setShowInput(false);\r\n            setLoading(false);\r\n        } catch (e) {\r\n            setLoading(false);\r\n        } \r\n        }catch(e){\r\n        setErrorRc(\"Please enter a valid 2D Integer array of dimn - int[n][2]\");\r\n        setRc(null); return;\r\n        }\r\n    };\r\n    \r\n    return (\r\n    <Paper>\r\n      <Card className={classes.mainCard} >\r\n          <CardHeader title=\"Airplane seats\" subheader=\"Fill the airplane seats based on the given algorithm\"></CardHeader>\r\n          {loading  && <LinearProgress /> }\r\n          <CardContent className={classes.cardContent}>\r\n            <Grid className={classes.gridContainer} container xs={12} spacing={1}>\r\n                { showInput ? \r\n                 <>\r\n                    <Grid item xs={6}>\r\n                        <TextField\r\n                            id=\"input-rc\"\r\n                            fullWidth\r\n                            label=\"Enter Rows &amp; columns\"\r\n                            multiline\r\n                            rowsMax={100}\r\n                            value={rc}\r\n                            onChange={(event) => {setRc(event.target.value); setErrorRc(null);}}\r\n                            variant=\"filled\"\r\n                            error={errorRc!= null}\r\n                            helperText={errorRc!= null ? errorRc : ''}\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <TextField\r\n                            id=\"input-pass\"\r\n                            fullWidth\r\n                            label=\"Enter no of passengers\"\r\n                            value={pass}\r\n                            type=\"number\"\r\n                            onChange={(event) => {setPass(event.target.value); setErrorPass(null)}}\r\n                            variant=\"filled\"\r\n                            error = {errorPass != null}\r\n                            helperText = {errorPass != null ? errorPass : ''}\r\n                            />\r\n                    </Grid>\r\n                 </>\r\n                 :\r\n                 <>\r\n                    { filledSeats !== null && filledSeats !==undefined &&  filledSeats.map((zones) => {\r\n                        return (\r\n                            <Grid xs={2}>\r\n                                <TableContainer component={Paper}>\r\n                                    <StyledTable className={classes.tables}> \r\n                                        {zones.map((rows) => {\r\n                                            return(\r\n                                            <TableRow>\r\n                                            {rows.map((seat)=>{\r\n                                                return(<StyledTableCell>{seat === 0 ? 'U' : seat}</StyledTableCell>)\r\n                                            })}\r\n                                            </TableRow>)\r\n                                        })}\r\n                                    </StyledTable> \r\n                                </TableContainer>\r\n                            </Grid>\r\n                        )})\r\n                    }\r\n                 </>\r\n                }   \r\n            </Grid>\r\n            {!showInput && \r\n                <h5> Total No. of Seats: {totalSeats} <br/>\r\n                No. of Seats filled: {pass} <br/>\r\n                {pass > totalSeats &&  <>Passengers waiting with no seats : {pass-totalSeats} <br/></>}\r\n                Input rows and columns : {rc} <br/>\r\n                U - Unoccupied Seat\r\n                </h5>\r\n            }\r\n          </CardContent>\r\n          <CardActions className={classes.cardActions}>\r\n              <Button color=\"primary\" variant=\"contained\" onClick={fillSeats}>\r\n                  Click To fill\r\n              </Button>\r\n              <Button color=\"secondary\" variant=\"contained\" onClick={reset}>\r\n                  Reset/Input\r\n              </Button>\r\n          </CardActions>\r\n      </Card>\r\n    </Paper>\r\n    );\r\n};\r\n\r\nexport default MainView;\r\n","import './App.css';\nimport MainView from './views/MainView';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      {/* <header className=\"App-header\"> */}\n        <MainView />\n      {/* </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}